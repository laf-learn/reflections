When would you want to use a remote repository rather than keeping all your work local?

Well, like this morning, being able to work on multiple computers is great.
So, being able to leave my work laptop at work and continue work at home on
my personal computer if necessary is an incentive for using a remote
repository. It's like collaborating with myself.


Why might you want to always pull changes manually rather than having Git 
automatically stay up-to-date with your remote repository?

If I'm working on changes, pulling before I've committed them could create
conflicts, so it's better to have the pulling behavious be manual. I can 
choose when the right time is to bring in updated versions.


Describe the differences between forks, clones, and branches. 
When would you use one instead of another?

Fork: make a copy of an existing repository on GitHub into your own account.
Changes and commits made will then go to your version, and not theirs.
Clone: pull down a copy of a repo from GitHub onto your computer.
Commits will be made on your local, and push/pulls to to/from the repo
on GitHub.
Branch: usually made on your local version, splits off a branch of commit
history from a main version. Used to work on experimental features or
make alternate version of the main (eg. easy-mode, other language).
At some point, would need to be merged back into mater.


What is the benefit of having a copy of the last known state of the remote stored locally?

To be able to compare changes I'm making against the most recent version,
to minimize the chance of merge conflicts. To minimize divergence.


How would you collaborate without using Git or GitHub? 
What would be easier, and what would be harder?

Emailing files back and forth (relies on manual name changes to keep track of versions, 
difficult to determine who made what changes).
Google docs (okay for single files, but not suites of files, or projects).
Shared files on a dropbox or similar account (similar to google docs).


When would you want to make changes in a separate branch rather than directly in master? 
What benefits does each approach have?

Working directly in master is mostly fine if you are the only one working on the project,
but using branches helps with collaboration (particularly if different people are working
on different parts of the project), as well as keeping master a clean, production version
while keeping extra feature work on branches until it's ready to be included in the
prod version.